/// <reference types="node" />
import { ConnectEvent, DisconnectEvent, ConnectionRejectedEvent, SentMessageEvent, PeerMessageEvent, BlockNotifyEvent, TxNotifyEvent, ErrorEvent, VersionEvent, RejectedEvent, AddressEvent } from '../interfaces/events.interface';
export declare type Handler<E> = (event: E) => void;
export declare class Events {
    private server;
    constructor(server?: boolean);
    private connectDispatcher;
    onConnect(handler: Handler<ConnectEvent>): void;
    fireConnect(event: ConnectEvent): void;
    clearConnect(): void;
    private disconnectDispatcher;
    onDisconnect(handler: Handler<DisconnectEvent>): void;
    fireDisconnect(event: DisconnectEvent): void;
    clearDisconnect(): void;
    private connectionRejectedDispatcher;
    onConnectionRejected(handler: Handler<ConnectionRejectedEvent>): void;
    fireConnectionRejected(event: ConnectionRejectedEvent): void;
    clearConnectionRejected(): void;
    private errorDispatcher;
    onError(handler: Handler<ErrorEvent>): void;
    fireError(event: ErrorEvent): void;
    clearError(): void;
    private rejectDispatcher;
    onReject(handler: Handler<RejectedEvent>): void;
    fireReject(event: RejectedEvent): void;
    clearReject(): void;
    private sentMessageDispatcher;
    onSentMessage(handler: Handler<SentMessageEvent>): void;
    fireSentMessage(event: SentMessageEvent): void;
    clearSentMessage(): void;
    private blockNotifyDispatcher;
    onBlockNotify(handler: Handler<BlockNotifyEvent>): void;
    fireBlockNotify(event: BlockNotifyEvent): void;
    clearBlockNotify(): void;
    private txNotifyDispatcher;
    onTxNotify(handler: Handler<TxNotifyEvent>): void;
    fireTxNotify(event: TxNotifyEvent): void;
    clearTxNotify(): void;
    private peerMessageDispatcher;
    onPeerMessage(handler: Handler<PeerMessageEvent>): void;
    firePeerMessage(event: PeerMessageEvent): void;
    clearPeerMessage(): void;
    private versionDispatcher;
    onVersion(handler: Handler<VersionEvent>): void;
    fireVersion(event: VersionEvent): void;
    clearVersion(): void;
    private verackDispatcher;
    onVerack(handler: Handler<Boolean>): void;
    fireVerack(event: Boolean): void;
    clearVerack(): void;
    private pingDispatcher;
    onPing(handler: Handler<Buffer>): void;
    firePing(event: Buffer): void;
    clearPing(): void;
    private pongDispatcher;
    onPong(handler: Handler<Buffer>): void;
    firePong(event: Buffer): void;
    clearPong(): void;
    private addrDispatcher;
    onAddr(handler: Handler<AddressEvent>): void;
    fireAddr(event: AddressEvent): void;
    clearAddr(): void;
    private getHeadersDispatcher;
    onGetHeaders(handler: Handler<any>): void;
    fireGetHeaders(event: any): void;
    clearGetHeaders(): void;
    private headersDispatcher;
    onHeaders(handler: Handler<any>): void;
    fireHeaders(event: any): void;
    clearHeaders(): void;
    private serverStartDispatcher;
    onServerStart(handler: Handler<boolean>): void;
    fireServerStart(event: boolean): void;
    clearServerStart(): void;
    on(event: string, handler: Handler<any>): void;
    clearAllListeners(): void;
}
